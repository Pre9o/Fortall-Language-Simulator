Gramática Livre de Contexto - Linguagem Fortall

=== SÍMBOLOS TERMINAIS ===
id, num, str, bool_literal
'programa', 'retorna', 'nada', 'funcao', 'principal', 'int', 'bool'
'se', 'senao', 'enquanto', 'escreva', 'leia'
'true', 'false'
';', '(', ')', '{', '}', ',', '='
'||', '&&', '==', '!=', '<', '>', '<=', '>='
'+', '-', '*', '/', '%', '!'

=== SÍMBOLOS NÃO-TERMINAIS ===
programa, funcaoPrincipal, declaracao, declaracaoVariavel, declaracaoFuncao
funcao, parametros, tipo, bloco, comando, atribuicao
comandoSe, comandoEnquanto, comandoEscreva, comandoLeia, comandoRetorna
listaExpressoes, expressao, expressaoOu, expressaoE, expressaoIgualdade
expressaoRelacional, expressaoAditiva, expressaoMultiplicativa
expressaoUnaria, expressaoPrimaria, chamadaFuncao, argumentos

=== PRODUÇÕES ===

// Programa principal
programa → 'programa' id ';' declaracao* funcaoPrincipal funcao*

// Função principal obrigatória
funcaoPrincipal → 'retorna' 'nada' 'funcao' 'principal' '(' ')' bloco

// Declarações globais
declaracao → declaracaoVariavel | declaracaoFuncao

// Declaração de variáveis
declaracaoVariavel → tipo id ('=' expressao)? ';'

// Declaração de funções
declaracaoFuncao → 'retorna' (tipo | 'nada') 'funcao' id '(' parametros? ')' bloco

// Função definida pelo usuário
funcao → declaracaoFuncao

// Parâmetros de função
parametros → tipo id (',' tipo id)*

// Tipos primitivos
tipo → 'int' | 'bool'

// Bloco de comandos
bloco → '{' comando* '}'

// Comandos possíveis
comando → declaracaoVariavel
        | atribuicao
        | chamadaFuncao ';'
        | comandoSe
        | comandoEnquanto
        | comandoEscreva
        | comandoLeia
        | comandoRetorna
        | bloco

// Atribuição
atribuicao → id '=' expressao ';'

// Estrutura condicional
comandoSe → 'se' '(' expressao ')' comando ('senao' comando)?

// Estrutura de repetição
comandoEnquanto → 'enquanto' '(' expressao ')' comando

// Comando de saída
comandoEscreva → 'escreva' '(' listaExpressoes ')' ';'

// Comando de entrada
comandoLeia → 'leia' '(' id ')' ';'

// Comando de retorno
comandoRetorna → 'retorna' expressao? ';'

// Lista de expressões (para escreva e argumentos)
listaExpressoes → expressao (',' expressao)*

// Hierarquia de expressões (por precedência)
expressao → expressaoOu

// Operador lógico OU (menor precedência)
expressaoOu → expressaoE ('||' expressaoE)*

// Operador lógico E
expressaoE → expressaoIgualdade ('&&' expressaoIgualdade)*

// Operadores de igualdade
expressaoIgualdade → expressaoRelacional (('==' | '!=') expressaoRelacional)*

// Operadores relacionais
expressaoRelacional → expressaoAditiva (('<' | '>' | '<=' | '>=') expressaoAditiva)*

// Operadores aditivos
expressaoAditiva → expressaoMultiplicativa (('+' | '-') expressaoMultiplicativa)*

// Operadores multiplicativos
expressaoMultiplicativa → expressaoUnaria (('*' | '/' | '%') expressaoUnaria)*

// Operadores unários
expressaoUnaria → ('!' | '-' | '+')? expressaoPrimaria

// Expressões primárias (maior precedência)
expressaoPrimaria → num
                  | bool_literal
                  | str
                  | id
                  | chamadaFuncao
                  | '(' expressao ')'

// Chamada de função
chamadaFuncao → id '(' argumentos? ')'

// Argumentos de função
argumentos → expressao (',' expressao)*

=== TOKENS LÉXICOS ===
id         → [a-zA-Z_][a-zA-Z0-9_]*
num        → [0-9]+
bool_literal → 'true' | 'false'
str        → '"' (~["\\\r\n] | '\\n' | '\\t' | '\\\\' | '\\"')* '"'
COMENTARIO → '/*' .*? '*/' (ignorado)
WS         → [ \t\r\n]+ (ignorado)

=== OBSERVAÇÕES ===
1. A gramática segue a precedência padrão de operadores
2. Operadores unários têm maior precedência
3. Expressões entre parênteses têm precedência máxima
4. Comentários em bloco são suportados e ignorados
5. Espaços em branco são ignorados
6. Literais booleanos 'true' e 'false' são reconhecidos como tokens especiais
7. Strings suportam escapes básicos (\n, \t, \\, \")
8. A função 'principal' é obrigatória em todo programa
9. Funções podem retornar tipos primitivos ou 'nada' (void)
10. Variáveis podem ser inicializadas na declaração